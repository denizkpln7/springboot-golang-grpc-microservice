// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: proto/common.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	// golang grpc start
	SaveProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*SaveProduct, error)
	SaveProductsData(ctx context.Context, opts ...grpc.CallOption) (OrderService_SaveProductsDataClient, error)
	SaveProductsDataAll(ctx context.Context, in *Product, opts ...grpc.CallOption) (OrderService_SaveProductsDataAllClient, error)
	SaveProductDataAllBack(ctx context.Context, opts ...grpc.CallOption) (OrderService_SaveProductDataAllBackClient, error)
	SavePaymentData(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*SavePayment, error)
	SaveAndMaxBalanceOrder(ctx context.Context, opts ...grpc.CallOption) (OrderService_SaveAndMaxBalanceOrderClient, error)
	GetByUserIdMaxOrder(ctx context.Context, in *Payment, opts ...grpc.CallOption) (OrderService_GetByUserIdMaxOrderClient, error)
	GetByUsersMaxOrder(ctx context.Context, opts ...grpc.CallOption) (OrderService_GetByUsersMaxOrderClient, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) SaveProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*SaveProduct, error) {
	out := new(SaveProduct)
	err := c.cc.Invoke(ctx, "/service.OrderService/saveProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) SaveProductsData(ctx context.Context, opts ...grpc.CallOption) (OrderService_SaveProductsDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[0], "/service.OrderService/saveProductsData", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceSaveProductsDataClient{stream}
	return x, nil
}

type OrderService_SaveProductsDataClient interface {
	Send(*Product) error
	CloseAndRecv() (*SaveProduct, error)
	grpc.ClientStream
}

type orderServiceSaveProductsDataClient struct {
	grpc.ClientStream
}

func (x *orderServiceSaveProductsDataClient) Send(m *Product) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderServiceSaveProductsDataClient) CloseAndRecv() (*SaveProduct, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SaveProduct)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) SaveProductsDataAll(ctx context.Context, in *Product, opts ...grpc.CallOption) (OrderService_SaveProductsDataAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[1], "/service.OrderService/saveProductsDataAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceSaveProductsDataAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_SaveProductsDataAllClient interface {
	Recv() (*SaveProduct, error)
	grpc.ClientStream
}

type orderServiceSaveProductsDataAllClient struct {
	grpc.ClientStream
}

func (x *orderServiceSaveProductsDataAllClient) Recv() (*SaveProduct, error) {
	m := new(SaveProduct)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) SaveProductDataAllBack(ctx context.Context, opts ...grpc.CallOption) (OrderService_SaveProductDataAllBackClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[2], "/service.OrderService/saveProductDataAllBack", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceSaveProductDataAllBackClient{stream}
	return x, nil
}

type OrderService_SaveProductDataAllBackClient interface {
	Send(*Product) error
	Recv() (*SaveProduct, error)
	grpc.ClientStream
}

type orderServiceSaveProductDataAllBackClient struct {
	grpc.ClientStream
}

func (x *orderServiceSaveProductDataAllBackClient) Send(m *Product) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderServiceSaveProductDataAllBackClient) Recv() (*SaveProduct, error) {
	m := new(SaveProduct)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) SavePaymentData(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*SavePayment, error) {
	out := new(SavePayment)
	err := c.cc.Invoke(ctx, "/service.OrderService/savePaymentData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) SaveAndMaxBalanceOrder(ctx context.Context, opts ...grpc.CallOption) (OrderService_SaveAndMaxBalanceOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[3], "/service.OrderService/saveAndMaxBalanceOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceSaveAndMaxBalanceOrderClient{stream}
	return x, nil
}

type OrderService_SaveAndMaxBalanceOrderClient interface {
	Send(*Payment) error
	CloseAndRecv() (*SavePayment, error)
	grpc.ClientStream
}

type orderServiceSaveAndMaxBalanceOrderClient struct {
	grpc.ClientStream
}

func (x *orderServiceSaveAndMaxBalanceOrderClient) Send(m *Payment) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderServiceSaveAndMaxBalanceOrderClient) CloseAndRecv() (*SavePayment, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SavePayment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) GetByUserIdMaxOrder(ctx context.Context, in *Payment, opts ...grpc.CallOption) (OrderService_GetByUserIdMaxOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[4], "/service.OrderService/getByUserIdMaxOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceGetByUserIdMaxOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_GetByUserIdMaxOrderClient interface {
	Recv() (*SavePayment, error)
	grpc.ClientStream
}

type orderServiceGetByUserIdMaxOrderClient struct {
	grpc.ClientStream
}

func (x *orderServiceGetByUserIdMaxOrderClient) Recv() (*SavePayment, error) {
	m := new(SavePayment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) GetByUsersMaxOrder(ctx context.Context, opts ...grpc.CallOption) (OrderService_GetByUsersMaxOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[5], "/service.OrderService/getByUsersMaxOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceGetByUsersMaxOrderClient{stream}
	return x, nil
}

type OrderService_GetByUsersMaxOrderClient interface {
	Send(*Payment) error
	Recv() (*SavePayment, error)
	grpc.ClientStream
}

type orderServiceGetByUsersMaxOrderClient struct {
	grpc.ClientStream
}

func (x *orderServiceGetByUsersMaxOrderClient) Send(m *Payment) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderServiceGetByUsersMaxOrderClient) Recv() (*SavePayment, error) {
	m := new(SavePayment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	// golang grpc start
	SaveProduct(context.Context, *Product) (*SaveProduct, error)
	SaveProductsData(OrderService_SaveProductsDataServer) error
	SaveProductsDataAll(*Product, OrderService_SaveProductsDataAllServer) error
	SaveProductDataAllBack(OrderService_SaveProductDataAllBackServer) error
	SavePaymentData(context.Context, *Payment) (*SavePayment, error)
	SaveAndMaxBalanceOrder(OrderService_SaveAndMaxBalanceOrderServer) error
	GetByUserIdMaxOrder(*Payment, OrderService_GetByUserIdMaxOrderServer) error
	GetByUsersMaxOrder(OrderService_GetByUsersMaxOrderServer) error
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) SaveProduct(context.Context, *Product) (*SaveProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProduct not implemented")
}
func (UnimplementedOrderServiceServer) SaveProductsData(OrderService_SaveProductsDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveProductsData not implemented")
}
func (UnimplementedOrderServiceServer) SaveProductsDataAll(*Product, OrderService_SaveProductsDataAllServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveProductsDataAll not implemented")
}
func (UnimplementedOrderServiceServer) SaveProductDataAllBack(OrderService_SaveProductDataAllBackServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveProductDataAllBack not implemented")
}
func (UnimplementedOrderServiceServer) SavePaymentData(context.Context, *Payment) (*SavePayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePaymentData not implemented")
}
func (UnimplementedOrderServiceServer) SaveAndMaxBalanceOrder(OrderService_SaveAndMaxBalanceOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveAndMaxBalanceOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetByUserIdMaxOrder(*Payment, OrderService_GetByUserIdMaxOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method GetByUserIdMaxOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetByUsersMaxOrder(OrderService_GetByUsersMaxOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method GetByUsersMaxOrder not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_SaveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).SaveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OrderService/saveProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).SaveProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_SaveProductsData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderServiceServer).SaveProductsData(&orderServiceSaveProductsDataServer{stream})
}

type OrderService_SaveProductsDataServer interface {
	SendAndClose(*SaveProduct) error
	Recv() (*Product, error)
	grpc.ServerStream
}

type orderServiceSaveProductsDataServer struct {
	grpc.ServerStream
}

func (x *orderServiceSaveProductsDataServer) SendAndClose(m *SaveProduct) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderServiceSaveProductsDataServer) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OrderService_SaveProductsDataAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Product)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).SaveProductsDataAll(m, &orderServiceSaveProductsDataAllServer{stream})
}

type OrderService_SaveProductsDataAllServer interface {
	Send(*SaveProduct) error
	grpc.ServerStream
}

type orderServiceSaveProductsDataAllServer struct {
	grpc.ServerStream
}

func (x *orderServiceSaveProductsDataAllServer) Send(m *SaveProduct) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderService_SaveProductDataAllBack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderServiceServer).SaveProductDataAllBack(&orderServiceSaveProductDataAllBackServer{stream})
}

type OrderService_SaveProductDataAllBackServer interface {
	Send(*SaveProduct) error
	Recv() (*Product, error)
	grpc.ServerStream
}

type orderServiceSaveProductDataAllBackServer struct {
	grpc.ServerStream
}

func (x *orderServiceSaveProductDataAllBackServer) Send(m *SaveProduct) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderServiceSaveProductDataAllBackServer) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OrderService_SavePaymentData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).SavePaymentData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OrderService/savePaymentData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).SavePaymentData(ctx, req.(*Payment))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_SaveAndMaxBalanceOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderServiceServer).SaveAndMaxBalanceOrder(&orderServiceSaveAndMaxBalanceOrderServer{stream})
}

type OrderService_SaveAndMaxBalanceOrderServer interface {
	SendAndClose(*SavePayment) error
	Recv() (*Payment, error)
	grpc.ServerStream
}

type orderServiceSaveAndMaxBalanceOrderServer struct {
	grpc.ServerStream
}

func (x *orderServiceSaveAndMaxBalanceOrderServer) SendAndClose(m *SavePayment) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderServiceSaveAndMaxBalanceOrderServer) Recv() (*Payment, error) {
	m := new(Payment)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OrderService_GetByUserIdMaxOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Payment)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).GetByUserIdMaxOrder(m, &orderServiceGetByUserIdMaxOrderServer{stream})
}

type OrderService_GetByUserIdMaxOrderServer interface {
	Send(*SavePayment) error
	grpc.ServerStream
}

type orderServiceGetByUserIdMaxOrderServer struct {
	grpc.ServerStream
}

func (x *orderServiceGetByUserIdMaxOrderServer) Send(m *SavePayment) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderService_GetByUsersMaxOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderServiceServer).GetByUsersMaxOrder(&orderServiceGetByUsersMaxOrderServer{stream})
}

type OrderService_GetByUsersMaxOrderServer interface {
	Send(*SavePayment) error
	Recv() (*Payment, error)
	grpc.ServerStream
}

type orderServiceGetByUsersMaxOrderServer struct {
	grpc.ServerStream
}

func (x *orderServiceGetByUsersMaxOrderServer) Send(m *SavePayment) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderServiceGetByUsersMaxOrderServer) Recv() (*Payment, error) {
	m := new(Payment)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "saveProduct",
			Handler:    _OrderService_SaveProduct_Handler,
		},
		{
			MethodName: "savePaymentData",
			Handler:    _OrderService_SavePaymentData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "saveProductsData",
			Handler:       _OrderService_SaveProductsData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "saveProductsDataAll",
			Handler:       _OrderService_SaveProductsDataAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "saveProductDataAllBack",
			Handler:       _OrderService_SaveProductDataAllBack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "saveAndMaxBalanceOrder",
			Handler:       _OrderService_SaveAndMaxBalanceOrder_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "getByUserIdMaxOrder",
			Handler:       _OrderService_GetByUserIdMaxOrder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getByUsersMaxOrder",
			Handler:       _OrderService_GetByUsersMaxOrder_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/common.proto",
}
